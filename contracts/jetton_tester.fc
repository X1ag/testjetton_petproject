#include "imports/stdlib.fc";
#include "constants.fc";
#include "helper.fc";
#include "utils.fc";

(int, cell, cell, cell) load_data() impure {
	slice ds = get_data().begin_parse();
	return (
		ds~load_coins(), ;; balance
		ds~load_ref(), ;; code jetton_wallet
		ds~load_ref(), ;; code jetton_minter 
		ds~load_ref() ;; content
	);
}

() send_transfer(int query_id, int amount, slice to, cell code, cell data) impure {
	var msg_body = begin_cell()
									.store_uint(op::transfer, 32)
									.store_uint(query_id,64)
									.store_coins(amount)
									.store_slice(to)
									.store_slice(my_address())
									.store_uint(0, 1)
									.store_coins(((ONE_TON * 2) / 100))
									.store_uint(0, 1)
								.end_cell();

	var msg = begin_cell()
						.store_uint(0x10, 6)
						.store_slice(calc_user_wallet(my_address(), JETTON_MINTER_ADDR, code))
						.store_coins(((ONE_TON * 5) / 100))
						.store_statinit_ref_and_body_ref(calculate_jetton_wallet_state_init(my_address(), JETTON_MINTER_ADDR,code),msg_body)
	.end_cell();

	send_raw_message(msg, 0);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
	if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
  }
	slice cs = in_msg_full.begin_parse();
	int flags = cs~load_uint(4);
	if (flags & 1){
		return ();
	}
	slice to_address = cs~load_msg_addr();
	force_chain(to_address);

	int op = in_msg_body~load_uint(32);
	int query_id = in_msg_body~load_uint(64);
	var (balance, jetton_wallet_code, jetton_minter_code, jetton_content) = load_data();
	if (op == op::transfer_notification) {
		int amount = in_msg_body~load_coins();
		save_data(balance + amount, jetton_wallet_code, jetton_minter_code, jetton_content);
	}

	if (op == 0x2ff2) { ;; send
		int amount = in_msg_body~load_coins();
		throw_if(error::not_enough_jettons, balance < amount);
		slice to_address = in_msg_body~load_msg_addr();
		save_data(balance - amount,jetton_wallet_code,jetton_minter_code,jetton_content);
		send_transfer(query_id,amount,to_address,jetton_minter_code,jetton_content);  
	} 
}

(slice) get_address(slice owner) method_id {
	var (balance, jetton_wallet_code, jetton_minter_code, jetton_content) = load_data();
	return calc_user_wallet(owner, JETTON_MINTER_ADDR, jetton_minter_code);
}

(int) get_contract_balance() method_id {
	var (balance, jetton_wallet_code, jetton_minter_code, jetton_content) = load_data();
	return balance; 
}